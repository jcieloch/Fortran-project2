! macierze (1,N) i (N,1)
@test
subroutine test1()
  use pfunit_mod
  use zad1
  implicit none
  real (kind = 8) :: first(1,1), second(1,1), multiply(1,1), proper_mult(1,1)
  integer (kind = 4) :: i, j, k
  real (kind = 8) :: f1(1, 10), s1(10,1), m1(1,1), pm1(1,1)
  real (kind = 8) :: f2(5, 1), s2(1,5), m2(5,5), pm2(5,5)

  first(1,1) = 2
  second(1,1) = 3
  proper_mult = matmul(first, second)
  call mm(first, second, multiply, k)
  @assertEqual(proper_mult , multiply)
  @assertEqual(0 , k)

  do i = 1, 10
    f1(1,i) = i
    s1(i,1) = i+i
  end do
  pm1 = matmul(f1, s1)
  call mm(f1, s1, m1, k)
  @assertEqual(pm1 , m1)
  @assertEqual(0 , k)

  do i = 1, 5
    f2(i,1) = i
    s2(1,i) = i*3
  end do
  pm2 = matmul(f2, s2)
  call mm(f2, s2, m2, k)
  @assertEqual(pm2 , m2)
  @assertEqual(0 , k)

end subroutine test1

! macierz duza
@test
subroutine test2()
  use pfunit_mod
  use zad1
  implicit none
  real (kind = 8) :: first(20,16), second(16,18), multiply(20,18), proper_mult(20,18)
  real (kind = 8) :: f1(30, 60), s1(60,50), m1(30,50), pm1(30, 50)
  real (kind = 8) :: f2(100, 100), s2(100,100), m2(100,100), pm2(100, 100)
  integer (kind = 4) :: i, j, k
 
  do i = 1, 20
    do j = 1, 16
      first(i,j) = i+j
    end do
  end do
  do i = 1, 16
    do j = 1, 18
      second(i,j) = i+j
    end do
  end do
  proper_mult = matmul(first, second)
  call mm(first, second, multiply, k)
  @assertEqual(proper_mult , multiply)
  @assertEqual(0 , k)

  do i = 1, 30
    do j = 1, 60
      f1(i,j) = i+j
    end do
  end do
  do i = 1, 60
    do j = 1, 50 
      s1(i,j) = i+j
    end do
  end do
  pm1 = matmul(f1, s1)
  call mm(f1, s1, m1, k)
  @assertEqual(pm1 , m1)
  @assertEqual(0 , k)

  do i = 1, 100
    do j = 1, 100
      f2(i,j) = i+j
    end do
  end do
  do i = 1, 100
    do j = 1, 100 
      s2(i,j) = i+j
    end do
  end do
  pm2 = matmul(f2, s2)
  call mm(f2, s2, m2, k)
  @assertEqual(pm2 , m2)
  @assertEqual(0 , k)

end subroutine test2

! macierze standardowe
@test
subroutine test4()
  use pfunit_mod
  use zad1
  implicit none
  real (kind = 8) :: first(2, 5), second(5, 6), multiply(2,6), proper_mult(2, 6)
  integer (kind = 4) :: i, j, k
  real (kind = 8) :: f1(5, 3), s1(3,3), m1(5,3), pm1(5,3)
  real (kind = 8) :: f2(3, 3), s2(3,3), m2(3,3), pm2(3,3)

  do i = 1, 2
    do j = 1, 5
      first(i,j) = i+j
    end do
  end do
  do i = 1, 5
    do j = 1, 6
      second(i,j) = i+j
    end do
  end do
  proper_mult = matmul(first, second)
  call mm(first, second, multiply, k)
  @assertEqual(proper_mult , multiply)
  @assertEqual(0 , k)

  do i = 1, 5
    do j = 1, 3
      f1(i,j) = i+j
    end do
  end do
  do i = 1, 3
    do j = 1, 3
      s1(i,j) = i+j
    end do
  end do
  pm1 = matmul(f1, s1)
  call mm(f1, s1, m1, k)
  @assertEqual(pm1 , m1)
  @assertEqual(0 , k)

end subroutine test4

! nie zgadzajace sie wymiary macierzy
@test
subroutine test5()
  use pfunit_mod
  use zad1
  implicit none
  real (kind = 8) :: first(2, 2), second(5, 6), multiply(2,6)
  integer (kind = 4) :: k, j
  real (kind = 8) :: f1(2, 3), s1(3,3), m1(5,6)
  call mm(first, second, multiply, k)
  @assertEqual(1 , k)
  call mm(f1, s1, m1, j)
  @assertEqual(2, j)
end subroutine test5
